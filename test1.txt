meta:
  name: neuro-access-orchestration
  description: Neuro SAN orchestration for access provisioning via chatbot interface
  version: "1.0.0"

llm_config:
  model_name: gpt-4o

commondefs:
  replacement_strings:
    aaosa_instructions: |
      1. Accept inquiry via chatbot.
      2. Trigger classification and agent handoff.
      3. Use GAIN to guide dynamic decisions.
      4. Chain agents with SAN logging and context memory.
    demo_mode: "Assume backend systems are active and orchestration is live."
    aaosa_command: "Explain your decision scope and required inputs."

agents:
  - id: smart_chatbot
    type: integrator
    function: "Interface for end user access request submission."
    instructions: "{demo_mode}"
    command: "{aaosa_command}"

  - id: request_classifier
    type: processor
    function: "Categorize incoming access requests."
    config:
      classifier_model: "access-request-v1"
    instructions: "{demo_mode}"
    command: "{aaosa_command}"

  - id: policy_guidance_agent
    type: processor
    function: "Perform SoD and RBAC checks using policy graph."
    instructions: "{demo_mode}"
    config:
      knowledge_graph: "policy-kg-v2"
    command: "{aaosa_command}"

  - id: role_validation_agent
    type: processor
    function: "Validate user identity and check roles via AD/Entra ID."
    instructions: "{demo_mode}"
    config:
      identity_provider: "entra-id"
    command: "{aaosa_command}"

  - id: compliance_precheck_agent
    type: processor
    function: "Fetch org data, access logs, and compliance rules."
    instructions: "{demo_mode}"
    config:
      policy_sources: ["Jira", "Confluence", "AD Logs"]
    command: "{aaosa_command}"

  - id: approval_workflow_agent
    type: orchestrator
    function: "Verify approval path and trigger provisioning."
    instructions: "{demo_mode}"
    config:
      route_logic: "workflow-v3"
    command: "{aaosa_command}"

  - id: access_grant_agent
    type: processor
    function: "Execute API calls and RPA scripts to provision access."
    instructions: "{demo_mode}"
    config:
      execution_modes: ["API", "Bot"]
    command: "{aaosa_command}"

workflow:
  - step: receive_request
    from: smart_chatbot
    to: request_classifier

  - step: classify_and_forward
    from: request_classifier
    to: policy_guidance_agent

  - step: evaluate_policy
    from: policy_guidance_agent
    to: role_validation_agent

  - step: validate_identity
    from: role_validation_agent
    to: compliance_precheck_agent

  - step: check_compliance
    from: compliance_precheck_agent
    to: approval_workflow_agent

  - step: trigger_approval
    from: approval_workflow_agent
    to: access_grant_agent

  - step: finalize_provisioning
    from: access_grant_agent
    to: output

output:
  type: access_audit_report
  channels:
    - SAN_memory_log
    - audit_dashboard
    - provisioning_history

env:
  secrets:
    OPENAI_KEY: ${AZURE_OPENAI_API_KEY}
    AD_TOKEN: ${IDENTITY_API_TOKEN}
    POLICY_API: ${COMPLIANCE_API_KEY}
  config_path: ./configs/access_orchestration.json


==============================================================


meta:
  name: neuro-automation-ops-v2
  description: Neuro SAN orchestration for end-to-end observability, incident correlation, and automated remediation
  version: "1.0.0"

llm_config:
  model_name: gpt-4o

commondefs:
  replacement_strings:
    aaosa_instructions: |
      1. Determine inquiry relevancy.
      2. Trigger appropriate down-chain agents.
      3. Ask clarifying questions if needed.
      4. Request agent fulfillments.
      5. Compile and deliver unified response.
    demo_mode: "Assume realistic backend integrations and produce grounded responses."
    aaosa_command: "Explain your coverage scope and required inputs for fulfilling this request."

agents:
  - id: telemetry_ingestor
    type: integrator
    function: "Ingest metrics, logs, and traces from Datadog agents."
    instructions: "{demo_mode}"
    command: "{aaosa_command}"

  - id: alert_aggregator
    type: processor
    function: "Process ingested data into structured events and alerts."
    instructions: "{demo_mode}"
    command: "{aaosa_command}"

  - id: noise_filter
    type: processor
    function: "Reduce alert noise based on confidence thresholds."
    instructions: "{demo_mode}"
    config:
      threshold: 0.8
      duration_window: 10m
    command: "{aaosa_command}"

  - id: correlation_engine
    type: processor
    function: "Correlate filtered alerts into unified incidents."
    instructions: "{demo_mode}"
    config:
      method: "temporal-graph"
      correlation_window: "15m"
    command: "{aaosa_command}"

  - id: remediation_orchestrator
    type: orchestrator
    function: "Trigger automated remediation actions."
    instructions: "{demo_mode}"
    config:
      playbooks:
        - restart_application
        - flush_cache
        - escalate_to_admin
    command: "{aaosa_command}"

  - id: itsm_ticket_agent
    type: integrator
    function: "Log incidents into ITSM and dispatch alerts to service teams."
    instructions: "{demo_mode}"
    config:
      endpoint: "https://itsm.example.com/api/ticket"
      modes: ["email", "chat", "call"]
    command: "{aaosa_command}"

  - id: insights_generator
    type: processor
    function: "Create insights from resolved incidents via Power BI integration."
    instructions: "{demo_mode}"
    command: "{aaosa_command}"

workflow:
  - step: ingest_telemetry
    from:
      - datadog_metrics
      - datadog_logs
      - datadog_traces
    to: telemetry_ingestor

  - step: aggregate_events
    from: telemetry_ingestor
    to: alert_aggregator

  - step: filter_noise
    from: alert_aggregator
    to: noise_filter

  - step: correlate_incidents
    from: noise_filter
    to: correlation_engine

  - step: trigger_remediation
    from: correlation_engine
    to: remediation_orchestrator

  - step: log_ticket
    from: remediation_orchestrator
    to: itsm_ticket_agent

  - step: publish_insights
    from: itsm_ticket_agent
    to: insights_generator

  - step: finalize_output
    from: insights_generator
    to: output

output:
  type: unified_incident_report
  channels:
    - powerbi_dashboard
    - service_audit
    - optimization_logs

env:
  secrets:
    OPENAI_KEY: ${AZURE_OPENAI_API_KEY}
    ITSM_TOKEN: ${ITSM_API_KEY}
  config_path: ./configs/neuro_ops_config.json

